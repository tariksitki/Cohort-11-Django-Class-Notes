
#! Deploya başlangıç-vscode aşamaları

1- todo app aktifleştirdik
2- varsa migrate işlemlerimizi yaptık
3- Genel dizinde Procfile dosyası oluşturduk
4- pip install gunicorn yaptık
5- pip freeze > requirements.txt ile req'e ekledik
6- settings'e  STATIC_ROOT = BASE_DIR / "staticfiles"  ekledik
7- pip install whitenoise yaptık
8- pip freeze > requirements.txt ile req'e ekledik
9- settings'te middleware'e 'whitenoise.middleware.WhiteNoiseMiddleware',  ekledik
10- pip install django-heroku yaptık
11- pip freeze > requirements.txt ile req'e ekledik
12- settingse şu kodu eklemeyi unutmayalım STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
13- Settings'e import django_heroku ekledik
14- Settingsin altına django_heroku.settings(locals()) ekledik 
15- githuba commitledik

#! Heroku tarafı Deploy Aşamaları

1- Herokuda sağ üstten Create-new app diyip app ismi verdik
2- Settingse geldik reveal config vars' a secret key ekledik
3- Buildpackten python seçiyoruz
4- Deploy kısmından githubu bağlayıp repo ismi giriyoruz connect diyoruz
5- Connectten sonra deploy branch dedik
6- sağ üstten more>run console diyip python manage.py migrate yazıyoruz

#! Deploy hatası alanlar için çözüm olabilecek şeyler

1-Secret keyinizde # işaretini düzeltiniz
2-import django heroku kodunu settingse eklerken altı çiziliyse projenizi ayrı olarak vscode'da açınız, procfile proje yolunuzu göremiyor demektir
3-formda importta share kodunu görüyor olabilir onu siliniz
4-githuba committen sonra sync yapmayı unutmayınız
5-herokuda disconnect edip tekrar bağlanınız ve deploy etmeden once run console'dan python manage.py migrate etmeyi unutmayınız 





selman hoca nin github i cok güzel dedi 

bu projenin read me si template olarak kullanilabilir 

bir project olusturmadan  manage.py komutlari calismaz. o nedenle ilk proje olustururken django-admin komutu kullanilir 


dersin sonunda tek sayfada delete ve update func lari olacak sekilde css güzellestir. 

db deki islemlerde sadece read de get method kullanilir 
diger tüm islemlerde post kullanilir. 

from django.contrib import messages
messages.success(request,"Todo created successfully")
messages.warning(request, "Todo deleted!")






Deployment:

Projemizi canliya alma

Heroku ücretli oluyor. 

Bu ortamlar deployment islemini cok kolaylastiriyor. Bunlarin haricinde mesela microsoft da deploy islemleri zor. 

backend projeleri netlify a da deploy edilebilir. 


clarusway dökümanda cli üzerinden deploy ekstra gösterilmis. 
bunu hoca yapmadi sen yap. 


biz arayüz üzerinden yapacagiz. 

notlar benim class notes icinde var. 

heroku da proje yükledigimizde, ilk 1 saat icinde bu projeye istek gelmezse server uykuya dalar. daha sonra istek yaptigimizda resimlerimizi göremeyebiliriz. bunun icin resimleri baska bir yere yüklemek gerekir. static dosyalarda problem yok
static leri amazon s3 ile yüklemek zorunda degiliz.  whitenoise a yükleriz.

django server ile direkt iletisime gecemez. bu nedenle wsgi file kullaniriz. 
internetten arastiralim. 

Gunicorn linux tabanli pc ler icin genelde.
windows icin islemler biraz zor. 


deploy etmeden önce localde calistigina emin olalim. 
yine deploy dan önce migrate komutlari calistiralim db son hali ile olussun. 



gunicorn hangi dosyayi okuyacagini belirtir. 


makemigrations --no-input 
mesela superuser olustururken isim girmek icin girilen input 


dökümani tamamen oku 

whitenoise   python framework ler icin yapilmistir. 


canliya gectigimizde bütün static dosyalari tek bir klasör icinde toplanmak zorunda 

heroku nun docs un da da django deploy yaziyor. 

python app lerinin hicbiri server ile direkt konusamaz. 
Bu nedenle Procfile icinde yazdigimiz kod,  app imizin hangi wsgi server ile konusacagini belirtir. deriz ki bizim projemizin icindeki wsgi 
gunicorn hangi wsgi file ini okuyacagini söyler. 

whitenoise un kendine ait dökümani var. 

no such a table hatasi,  migrate komutu calismadigi icindir. 

clarusway dökümanda STATIC_ROOT = BASE_DIR / "staticfiles"  kodunun eski hali var bunu kullanalim. 

bu collect static diye bir kod calistiir. hepsini bir yerde toplar. 

static dirs local de kullanilir. 
canliya gecince static root kullanilir. 


whitenoise icin middleware yukarilarda olmali 

heroku  white noise kullanimini önerir. alternatif amazon s3 

gunicorn bir web server dir. 
django app baska server lar ile de calisir ama heroku bunu öneriyor. 


django-heroku  yüklü olmak zorunda calismasi icin 

heroku ya gönderince otomatik  postgresql ile calisir. 
django-heroku yükleyince postgre icin bir paket daha yükler. 
cünkü django app imizin posgte ile konusmasi gerekir. 



template lerde hata alinca prettier HTML yapilir. ve if ve for lar düzenlenir. 
sonrasinda calisir. 


mac ler icin  pip install psycopg2-binary


1- todo app aktifleştirdik
2- varsa migrate işlemlerimizi yaptık
3- Genel dizinde Procfile dosyası oluşturduk
4- pip install gunicorn yaptık
5- pip freeze > requirements.txt ile req'e ekledik
6- settings'e  STATIC_ROOT = BASE_DIR / "staticfiles"  ekledik
7- pip install whitenoise yaptık
8- pip freeze > requirements.txt ile req'e ekledik
9- settings'te middleware'e 'whitenoise.middleware.WhiteNoiseMiddleware',  ekledik
10- pip install django-heroku yaptık
11- pip freeze > requirements.txt ile req'e ekledik
12- settingse şu kodu eklemeyi unutmayalım STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
13- Settings'e import django_heroku ekledik
14- Settingsin altına django_heroku.settings(locals()) ekledik 
15- githuba commitledik




container mimarisi 
Docker:
bir server icinde onlarca container olusturur. 
hepsini birbirine baglar. 
biri off a ciktiginda sunu calistir der. 
bunun icin instrument tool lari var. 

.env i heroku da ayarlama
settings
reveal config vars 


add buildpack den python secmemiz gerekir. 

heroku da settings de sag üstte more var. 
run console diyoruz 
cikan bash de 
python manage.py migrate deriz. 


herokuya yükleme yaparken, requirements.txt dosya ismi cok önemli. 


1- Herokuda sağ üstten Create-new app diyip app ismi verdik
2- Settingse geldik reveal config vars' a secret key ekledik
3- Buildpackten python seçiyoruz
4- Deploy kısmından githubu bağlayıp repo ismi giriyoruz connect diyoruz
5- Connectten sonra deploy branch dedik
6- sağ üstten more>run console diyip python manage.py migrate yazıyoruz



Önemli:  dosyalar icerisinde import islemlerinde otomatik import ederken hatali yerden import ediliyor. import edilen bu paket leri kullanmadigimizda deploy da hata veriyor. 

Önemli:  gunicorn yazarken : dan sonra bir bosluk deploya da önemli 
Bizden ne istiyorsa birebir yazmak lazim 



CI   continuous integration demek. 
cd   deployment

CI / CD pipeline denir. önce server a yükler sonra canliya alir. 
server a alinir burada gerekli testler yapilir. sonra canliya alinir. 
heroku da otomatik deploys enable diyerek yapariz. 
Bunu yaptigimizda, projemizde yaptigimiz herhangi bir degisikligi github a commit ettigimizde, biraz bekledigimizde heroku d ada gelir. 


Bizim proje heroku ya yüklenirken en son heroku ui inda sag üste more a tiklayarak run console da yazdigimiz migrate komutlarinin alternatifi;

Procfile da    release: python manage.py migrate    komutu yazmaktir. 

